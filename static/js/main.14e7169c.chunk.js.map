{"version":3,"sources":["api/twitchData.js","containers/Streams.js","api/twitchLive.js","containers/LiveStreams.js","App.js","serviceWorker.js","index.js"],"names":["twitchUserData","axios","method","url","then","response","randoCalrissian","array","i","copy","n","length","Math","floor","random","push","shuffle","data","split","join","users","Streams","useState","userData","setUserData","userLinks","setUserLinks","useEffect","dl","map","name","Grid","doubling","columns","style","backgroundColor","card","index","Column","key","Card","href","target","rel","Image","src","logo","wrapped","ui","Content","Header","Meta","bio","twitchUserLive","noSpaceShallPass","channelIds","_id","toString","streams","classes","nolive","noLiveText","fontSize","color","channel","setInterval","className","root","preview","large","description","extra","Icon","App","props","styleLink","document","createElement","head","appendChild","LiveStreams","Divider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.14e7169c.chunk.js","sourcesContent":["import axios from 'axios'\r\n// import * as twitchConstant from './getTwitchUsers';\r\n\r\nexport const twitchUserData = () => {\r\n  return axios({\r\n    method: 'get',\r\n    url: 'https://elegin.github.io/twitchers/'\r\n\r\n  })\r\n  .then(response => {\r\n    let noSpaceShallPass = response.data.split(/\\s+/).join('');\r\n    let strArr = noSpaceShallPass.split(\",\");\r\n    const shuffle = (array) => {\r\n     var copy = [], n = array.length, i;\r\n     while (n) {\r\n       i = Math.floor(Math.random() * array.length);\r\n       if (i in array) {\r\n         copy.push(array[i]);\r\n         delete array[i];\r\n         n--;\r\n       }\r\n     }\r\n     return copy;\r\n    }\r\n   let randoCalrissian = shuffle(strArr);\r\n   let userData = []\r\n   return axios(\r\n       {\r\n         'method':'GET',\r\n         'url':'https://api.twitch.tv/kraken/users',\r\n         'headers': {\r\n             'Accept': 'application/vnd.twitchtv.v5+json',\r\n             'Client-ID': '38kka8u16jpo72tpdefcp6f5nm86kk'\r\n         },\r\n         'params': {\r\n             'login': randoCalrissian\r\n         }\r\n       }\r\n     )\r\n     .then(response => {\r\n       userData = response.data.users;\r\n       return userData\r\n     });\r\n  }) \r\n\r\n  \r\n\r\n }\r\n\r\nexport default twitchUserData;\r\n\r\n\r\n","import React , {useEffect , useState} from 'react';\r\nimport { Grid, Card, Image } from 'semantic-ui-react'\r\n\r\nimport twitchUserData from '../api/twitchData';\r\n\r\n\r\nconst Streams = ({users}) => {\r\n  const [userData, setUserData] = useState([]);\r\n  const [userLinks, setUserLinks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    twitchUserData().then(function(response) {\r\n      setUserData(response)\r\n      const dl = response.map((data) => (\r\n        `https://www.twitch.tv/${data.name}`\r\n      ));\r\n      setUserLinks(dl );\r\n    });\r\n \r\n  }, []);   \r\n\r\n\r\n\r\n\r\n  return (\r\n    <Grid doubling columns={4} style={{backgroundColor: '#6441a5'}}>\r\n      {userData.map((card,index) => (\r\n          <Grid.Column key={index}>\r\n            <Card\r\n             href={userLinks[index]}\r\n             target=\"_blank\"  \r\n             rel=\"noopener noreferrer\"\r\n             >\r\n              <Image src={card.logo} wrapped ui={false} />\r\n              <Card.Content>\r\n                <Card.Header>{card.name}</Card.Header>\r\n                <Card.Meta>{card.bio}</Card.Meta>\r\n               </Card.Content>\r\n            </Card>\r\n        </Grid.Column>\r\n      ))}\r\n    </Grid>    \r\n\r\n  );\r\n\r\n};\r\n\r\nexport default Streams;","import axios from 'axios'\r\n\r\n\r\nexport const twitchUserLive = () => {\r\n  return axios({\r\n    method: 'get',\r\n    url: 'https://elegin.github.io/twitchers/'\r\n  }).then(response => {\r\n    let noSpaceShallPass = response.data.split(/\\s+/).join('');\r\n    return axios(\r\n        {\r\n          'method':'GET',\r\n          'url':'https://api.twitch.tv/kraken/users',\r\n          'headers': {\r\n              'Accept': 'application/vnd.twitchtv.v5+json',\r\n              'Client-ID': '38kka8u16jpo72tpdefcp6f5nm86kk'\r\n          },\r\n          'params': {\r\n              'login': noSpaceShallPass\r\n          }\r\n        }\r\n      )\r\n      .then(response => {\r\n        const channelIds = response.data.users.map((data)=>{ return  data._id });\r\n        // console.log(userIds);\r\n        return axios(\r\n          {\r\n            'method':'GET',\r\n            'url':'https://api.twitch.tv/kraken/streams',\r\n            'headers': {\r\n                'Accept': 'application/vnd.twitchtv.v5+json',\r\n                'Client-ID': '38kka8u16jpo72tpdefcp6f5nm86kk'\r\n            },\r\n            'params': {\r\n                'channel': channelIds.toString(),\r\n            }\r\n          }\r\n        ).then(response => {\r\n          // console.log(response.data.streams)\r\n          return response.data.streams\r\n        })\r\n      });\r\n  \r\n  })  \r\n         \r\n\r\n}\r\nexport default twitchUserLive ;\r\n\r\n\r\n","import React , {useEffect , useState} from 'react';\r\nimport twitchUserLive from '../api/twitchLive';\r\nimport { Grid, Card, Image, Icon } from 'semantic-ui-react';\r\nconst useStyles = () => ({\r\n  nolive: {\r\n     backgroundColor: 'black',\r\n  },\r\n  noLiveText: {\r\n    fontSize: '2.5em',\r\n    backgroundColor: 'black',\r\n    color: 'white'\r\n  },});\r\n\r\nconst Streams = () => {\r\n  const [userData, setUserData] = useState([]);\r\n  const [userLinks, setUserLinks] = useState([]);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    twitchUserLive().then(function(response) {\r\n      const dl = response.map((data) => (\r\n        `https://www.twitch.tv/${data.channel.name}`\r\n      ));\r\n      setUserLinks(dl);\r\n      setUserData(response)\r\n    });\r\n    setInterval(() => {\r\n      twitchUserLive().then(function(response) {\r\n        const dl = response.map((data) => (\r\n          `https://www.twitch.tv/${data.channel.name}`\r\n        ));\r\n        setUserLinks(dl);\r\n        setUserData(response)\r\n       });\r\n     }, 10000); \r\n  }, []);   \r\n  if(userData.length === 0){\r\n    return (\r\n      <div className={classes.root}>\r\n        <p  className={classes.noLiveText}>No live Hackers</p>\r\n      </div>\r\n   \r\n    ) \r\n  } else {\r\n    return (\r\n      <Grid doubling columns={4} style={{backgroundColor: '#6441a5'}}>\r\n      {userData.map((card,index) => (\r\n          <Grid.Column key={index}>\r\n            <Card\r\n             href={userLinks[index]}\r\n             target=\"_blank\"  \r\n             rel=\"noopener noreferrer\"\r\n             >\r\n              <Image src={card.preview.large} wrapped ui={false} />\r\n              <Card.Content>\r\n                <Card.Header>{card.channel.name}</Card.Header>\r\n                <Card.Meta>{card.channel.description}</Card.Meta>\r\n               </Card.Content>\r\n               <Card.Content extra >\r\n                  <Icon name='user' color='red'/>\r\n                  LIVE\r\n    </Card.Content>               \r\n            </Card>\r\n        </Grid.Column>\r\n      ))}\r\n    </Grid>        \r\n    );\r\n  }\r\n\r\n\r\n\r\n};\r\n\r\nexport default Streams;","import React from 'react'\r\nimport Streams from './containers/Streams';\r\nimport LiveStreams from './containers/LiveStreams';\r\nimport { Divider } from 'semantic-ui-react'\r\n\r\nconst App = props => {\r\n   const styleLink = document.createElement(\"link\");\r\n   styleLink.rel = \"stylesheet\";\r\n   styleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\r\n   document.head.appendChild(styleLink);\r\n   return (\r\n     <div >\r\n         \r\n         <LiveStreams />\r\n         <Divider />\r\n         <Streams />\r\n      </div> \r\n   );\r\n\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}