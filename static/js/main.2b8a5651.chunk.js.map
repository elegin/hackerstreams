{"version":3,"sources":["api/twitchData.js","containers/Streams.js","api/twitchLive.js","api/getTwitchUsers.js","containers/LiveStreams.js","App.js","serviceWorker.js","index.js"],"names":["twitchUserData","axios","method","url","then","response","console","log","data","randoCalrissian","array","i","copy","n","length","Math","floor","random","push","shuffle","split","join","users","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","icon","color","Streams","useState","userData","setUserData","classes","useEffect","className","GridList","cellHeight","gridList","GridListTile","key","cols","style","height","ListSubheader","component","map","tile","index","src","logo","alt","name","GridListTileBar","title","subtitle","bio","actionIcon","IconButton","aria-label","Link","href","target","rel","twitchUserLive","noSpaceShallPass","channelIds","_id","toString","streams","nolive","noLiveText","fontSize","setInterval","preview","medium","channel","description","App","props","LiveStreams","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2b8a5651.chunk.js","sourcesContent":["import axios from 'axios'\r\n// import * as twitchConstant from './getTwitchUsers';\r\n\r\nexport const twitchUserData = () => {\r\n  return axios({\r\n    method: 'get',\r\n    url: 'https://rtfm.live/'\r\n  \r\n  })\r\n  .then(response => {\r\n      console.log(response.data)\r\n      let noSpaceShallPass = response.data.split(/\\s+/).join('');\r\n      let strArr = noSpaceShallPass.split(\",\");\r\n      \r\n      const shuffle = (array) => {\r\n       var copy = [], n = array.length, i;\r\n       while (n) {\r\n         i = Math.floor(Math.random() * array.length);\r\n         if (i in array) {\r\n           copy.push(array[i]);\r\n           delete array[i];\r\n           n--;\r\n         }\r\n       }\r\n       return copy;\r\n     }\r\n     \r\n      let randoCalrissian = shuffle(strArr);\r\n     \r\n       let userData = []\r\n       return axios(\r\n           {\r\n             'method':'GET',\r\n             'url':'https://api.twitch.tv/kraken/users',\r\n             'headers': {\r\n                 'Accept': 'application/vnd.twitchtv.v5+json',\r\n                 'Client-ID': '38kka8u16jpo72tpdefcp6f5nm86kk'\r\n             },\r\n             'params': {\r\n                 'login': randoCalrissian\r\n             }\r\n           }\r\n         )\r\n         .then(response => {\r\n           userData = response.data.users;\r\n           return userData\r\n         });\r\n\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n   \r\n\r\n }\r\n\r\nexport default twitchUserData;\r\n\r\n\r\n","import React , {useEffect , useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Link from '@material-ui/core/Link';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n// import PlayCircleFilledWhiteIcon from '@material-ui/icons/PlayCircleFilledWhite';\r\nimport twitchUserData from '../api/twitchData';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: 'gray',\r\n  },\r\n  icon: {\r\n    color: 'rgba(255, 255, 255, 0.54)',\r\n  },\r\n}));\r\n\r\n\r\n\r\n// const Streams = props => {\r\nconst Streams = ({users}) => {\r\n  const [userData, setUserData] = useState([]);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    twitchUserData().then(function(response) {\r\n      // console.log(response);\r\n      setUserData(response)\r\n    });\r\n \r\n  }, []);   \r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <GridList cellHeight={500} className={classes.gridList}>\r\n        <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\r\n          <ListSubheader component=\"div\">#HackerStreams</ListSubheader>\r\n        </GridListTile>\r\n        {userData.map((tile,index) => (\r\n             <GridListTile key={index}>\r\n              <img src={tile.logo} alt={tile.name} />\r\n              <GridListTileBar\r\n                title={tile.name}\r\n                subtitle={<span>{tile.bio}</span>}\r\n                 actionIcon={\r\n                  <IconButton aria-label={`Go to ${tile.name}`} className={classes.icon}>\r\n                    <Link  href={`https://www.twitch.tv/${tile.name}`} target=\"_blank\"  rel=\"noopener noreferrer\">\r\n                      GO\r\n                    </Link> \r\n                  </IconButton>\r\n                }                \r\n              />\r\n            </GridListTile>\r\n\r\n         ))}\r\n      </GridList>\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default Streams;","import axios from 'axios'\r\nimport * as twitchConstant from './getTwitchUsers';\r\n\r\nexport const twitchUserLive = () => {\r\n  let noSpaceShallPass = twitchConstant.TWITCHERS.split(/\\s+/).join('');\r\n\r\n    return axios(\r\n        {\r\n          'method':'GET',\r\n          'url':'https://api.twitch.tv/kraken/users',\r\n          'headers': {\r\n              'Accept': 'application/vnd.twitchtv.v5+json',\r\n              'Client-ID': '38kka8u16jpo72tpdefcp6f5nm86kk'\r\n          },\r\n          'params': {\r\n              'login': noSpaceShallPass\r\n          }\r\n        }\r\n      )\r\n      .then(response => {\r\n        const channelIds = response.data.users.map((data)=>{ return  data._id });\r\n        // console.log(userIds);\r\n        return axios(\r\n          {\r\n            'method':'GET',\r\n            'url':'https://api.twitch.tv/kraken/streams',\r\n            'headers': {\r\n                'Accept': 'application/vnd.twitchtv.v5+json',\r\n                'Client-ID': '38kka8u16jpo72tpdefcp6f5nm86kk'\r\n            },\r\n            'params': {\r\n                'channel': channelIds.toString(),\r\n            }\r\n          }\r\n        ).then(response => {\r\n          // console.log(response.data.streams)\r\n          return response.data.streams\r\n        })\r\n      });\r\n         \r\n\r\n}\r\nexport default twitchUserLive ;\r\n\r\n\r\n","export const TWITCHERS = `\r\n    lady_demona,\r\n    golgothus,\r\n    yaboiiviking,\r\n    AlkalineRed,\r\n    alxrogan,\r\n    hackwithbourbon,\r\n    theblindhacker,\r\n    th1nk3r_is,\r\n    jumpsh1p,\r\n    alyssam_infosec,\r\n    lpnoway,\r\n    dj_ir0ngruve,\r\n    zephrphish,\r\n    elkentaro,\r\n    1o57,\r\n    secondorderchaos,\r\n    synshop,\r\n    hackingdave,\r\n    lordsaibat,\r\n    spaceboyr00,\r\n    madhatunspecific\r\n`;\r\n\r\n\r\n","import React , {useEffect , useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Link from '@material-ui/core/Link';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n// import PlayCircleFilledWhiteIcon from '@material-ui/icons/PlayCircleFilledWhite';\r\nimport twitchUserLive from '../api/twitchLive';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: 'gray',\r\n  },\r\n  nolive: {\r\n     backgroundColor: 'black',\r\n  },\r\n  noLiveText: {\r\n    fontSize: '2.5em',\r\n    backgroundColor: 'black',\r\n    color: 'white'\r\n  },\r\n  icon: {\r\n    color: 'rgba(255, 255, 255, 0.54)',\r\n  },\r\n}));\r\n\r\nconst Streams = () => {\r\n  const [userData, setUserData] = useState([]);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    twitchUserLive().then(function(response) {\r\n      // console.log(response);\r\n      setUserData(response)\r\n    });\r\n    setInterval(() => {\r\n      twitchUserLive().then(function(response) {\r\n        //  console.log(response);\r\n         setUserData(response)\r\n       });\r\n     }, 10000); \r\n  }, []);   \r\n  // console.log(userData)\r\n  if(userData.length === 0){\r\n    return (\r\n      <div className={classes.root}>\r\n        <p  className={classes.noLiveText}>No live Hackers</p>\r\n      </div>\r\n   \r\n    ) \r\n  } else {\r\n    return (\r\n      <div className={classes.root}>\r\n        <GridList cellHeight={500} className={classes.gridList}>\r\n          <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\r\n            <ListSubheader component=\"div\">LIVE #HackerStreams </ListSubheader>\r\n          </GridListTile>\r\n          {userData.map((tile,index) => (\r\n              <GridListTile key={index}>\r\n              <img src={tile.preview.medium} alt={tile.channel.name} />\r\n              <GridListTileBar\r\n                title={tile.name}\r\n                subtitle={<span>{tile.channel.description}</span>}\r\n                  actionIcon={\r\n                  <IconButton aria-label={`Go to ${tile.channel.name}`} className={classes.icon}>\r\n                    <Link  href={`https://www.twitch.tv/${tile.channel.name}`} target=\"_blank\"  rel=\"noopener noreferrer\">\r\n                      GO\r\n                    </Link> \r\n                  </IconButton>\r\n                }                \r\n              />\r\n            </GridListTile>\r\n  \r\n           ))}\r\n        </GridList>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\n};\r\n\r\nexport default Streams;","import React from 'react'\r\nimport Streams from './containers/Streams';\r\nimport LiveStreams from './containers/LiveStreams';\r\n\r\nconst App = props => {\r\n\r\n   return (\r\n     <div>\r\n         <LiveStreams />\r\n         <Streams />\r\n      </div> \r\n   );\r\n\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}