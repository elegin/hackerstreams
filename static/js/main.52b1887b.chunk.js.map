{"version":3,"sources":["containers/Streams.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","icon","color","Streams","users","useState","userData","setUserData","classes","useEffect","a","axios","response","data","fetchData","className","GridList","cellHeight","gridList","GridListTile","key","cols","style","height","ListSubheader","component","map","tile","index","src","logo","alt","name","GridListTileBar","title","subtitle","bio","actionIcon","IconButton","aria-label","Link","href","target","rel","App","props","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sUAWMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,SACVC,gBAAiB,QAMnBC,KAAM,CACJC,MAAO,iCAgFIC,EAzEC,SAAC,GAAY,EAAXC,MAAY,IAAD,EACKC,mBAAS,IADd,mBACpBC,EADoB,KACVC,EADU,KAEpBC,EAAUhB,IAsBjB,OArBAiB,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEACQC,IACpB,CACE,OAAS,MACT,IAAM,qCACN,QAAW,CACP,OAAU,mCACV,YAAa,kCAEjB,OAAU,CACN,MAAQ,8FAVF,OACVC,EADU,OAcdL,EAAYK,EAASC,KAAKT,OAdZ,2CAAH,qDAiBfU,KACC,IAGD,yBAAKC,UAAWP,EAAQb,MACtB,kBAACqB,EAAA,EAAD,CAAUC,WAAY,IAAKF,UAAWP,EAAQU,UAC5C,kBAACC,EAAA,EAAD,CAAcC,IAAI,YAAYC,KAAM,EAAGC,MAAO,CAAEC,OAAQ,SACtD,kBAACC,EAAA,EAAD,CAAeC,UAAU,OAAzB,kBAEDnB,EAASoB,KAAI,SAACC,EAAKC,GAAN,OACT,kBAACT,EAAA,EAAD,CAAcC,IAAKQ,GAClB,yBAAKC,IAAKF,EAAKG,KAAMC,IAAKJ,EAAKK,OAC/B,kBAACC,EAAA,EAAD,CACEC,MAAOP,EAAKK,KACZG,SAAU,qCAAWR,EAAKS,KAE1BC,WACE,kBAACC,EAAA,EAAD,CAAYC,aAAA,gBAAqBZ,EAAKK,MAAQjB,UAAWP,EAAQP,MAC/D,kBAACuC,EAAA,EAAD,CAAOC,KAAI,gCAA2Bd,EAAKK,MAAQU,OAAO,SAAUC,IAAI,uBAAxE,gBC5DLC,EANH,SAAAC,GAET,OAAO,kBAAC,EAAD,OCMUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.52b1887b.chunk.js","sourcesContent":["import React , {useEffect , useState} from 'react';\r\nimport axios from 'axios';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Link from '@material-ui/core/Link';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n// import PlayCircleFilledWhiteIcon from '@material-ui/icons/PlayCircleFilledWhite';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: 'gray',\r\n  },\r\n  // gridList: {\r\n    // width: 500,\r\n    // height: 450,\r\n  // },\r\n  icon: {\r\n    color: 'rgba(255, 255, 255, 0.54)',\r\n  },\r\n}));\r\n\r\n\r\n\r\n// const Streams = props => {\r\nconst Streams = ({users}) => {\r\n  const [userData, setUserData] = useState([]);\r\n   const classes = useStyles();\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response  = await axios(\r\n          {\r\n            'method':'GET',\r\n            'url':'https://api.twitch.tv/kraken/users',\r\n            'headers': {\r\n                'Accept': 'application/vnd.twitchtv.v5+json',\r\n                'Client-ID': '38kka8u16jpo72tpdefcp6f5nm86kk'\r\n            },\r\n            'params': {\r\n                'login':'1o57,secondorderchaos,synshop,lpnoway,hackwithbourbon,alkalinered,hackingdave,lordsaibat',\r\n            }\r\n          }\r\n        );\r\n        setUserData(response.data.users);\r\n    }\r\n    \r\n    fetchData();\r\n  }, []);   \r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <GridList cellHeight={500} className={classes.gridList}>\r\n        <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\r\n          <ListSubheader component=\"div\">HackerStreams</ListSubheader>\r\n        </GridListTile>\r\n        {userData.map((tile,index) => (\r\n             <GridListTile key={index}>\r\n              <img src={tile.logo} alt={tile.name} />\r\n              <GridListTileBar\r\n                title={tile.name}\r\n                subtitle={<span>by: {tile.bio}</span>}\r\n                // <a href={`https://www.twitch.tv/${tile.name}`} target=\"_blank\"  rel=\"noopener noreferrer\"></a> \r\n                actionIcon={\r\n                  <IconButton aria-label={`Go to ${tile.name}`} className={classes.icon}>\r\n                    <Link  href={`https://www.twitch.tv/${tile.name}`} target=\"_blank\"  rel=\"noopener noreferrer\">\r\n                      GO\r\n                    </Link> \r\n                  </IconButton>\r\n                }                \r\n              />\r\n            </GridListTile>\r\n         ))}\r\n      </GridList>\r\n    </div>\r\n  );\r\n\r\n\r\n    // return (\r\n    //     <div className={classes.root}>\r\n    //     <GridList cellHeight={180} className={classes.gridList}>\r\n    //       <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\r\n    //         <ListSubheader component=\"div\">HackerStreams</ListSubheader>\r\n    //       </GridListTile>\r\n    //       {userData.map((tile) => (\r\n    //         <GridListTile key={tile.name} cols={1}>\r\n    //           <img src={tile.logo} alt={tile.bio} />\r\n    //         </GridListTile>\r\n    //       ))}\r\n    //     </GridList>\r\n    //   </div>\r\n        // <div>\r\n        //     <h1>Streams</h1>\r\n        //     <Stream />\r\n        // </div> \r\n    // );\r\n\r\n};\r\n\r\nexport default Streams;","import React from 'react'\n// import Card from './components/Card/Card';\nimport Streams from './containers/Streams';\n\nconst App = props => {\n\n   return <Streams />;\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}