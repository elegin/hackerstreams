{"version":3,"sources":["components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","users","useState","userData","setUserData","useEffect","a","axios","response","data","fetchData","map","name","className","key","href","target","rel","src","logo","alt","display_name","bio","App","props","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSA6HeA,G,MA1HF,SAAC,GAAY,EAAXC,MAAY,IAAD,EAEQC,mBAAS,IAFjB,mBAEjBC,EAFiB,KAEPC,EAFO,KAwBxB,OArBAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEACQC,IACpB,CACE,OAAS,MACT,IAAM,qCACN,QAAW,CACP,OAAU,mCACV,YAAa,kCAEjB,OAAU,CACN,MAAQ,8FAVF,OACVC,EADU,OAcdJ,EAAYI,EAASC,KAAKR,OAdZ,2CAAH,qDAiBfS,KACC,IAGH,4BACGP,EAASQ,KAAI,SAAAC,GAAI,OAEhB,wBAAIC,UAAU,OAAOC,IAAKF,EAAKA,MAC7B,uBAAGG,KAAI,gCAA2BH,EAAKA,MAAQI,OAAO,SAAUC,IAAI,uBAClE,yBAAKC,IAAKN,EAAKO,KAAMC,IAAKR,EAAKS,gBAEjC,2BAAIT,EAAKS,cACT,2BAAIT,EAAKU,YCAFC,EA/BD,SAAAC,GAuBV,OAAO,kBAAC,EAAD,OChBSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.64a6869a.chunk.js","sourcesContent":["import React , {useEffect , useState} from 'react'\r\nimport axios from 'axios'\r\nimport './Card.css';\r\nconst Card = ({users}) => {\r\n  // let users = '1o57,secondorderchaos,synshop,lpnoway,hackwithbourbon,alkalinered,hackingdave,lordsaibat'\r\n  const [userData, setUserData] = useState([]);\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response  = await axios(\r\n          {\r\n            'method':'GET',\r\n            'url':'https://api.twitch.tv/kraken/users',\r\n            'headers': {\r\n                'Accept': 'application/vnd.twitchtv.v5+json',\r\n                'Client-ID': '38kka8u16jpo72tpdefcp6f5nm86kk'\r\n            },\r\n            'params': {\r\n                'login':'1o57,secondorderchaos,synshop,lpnoway,hackwithbourbon,alkalinered,hackingdave,lordsaibat',\r\n            }\r\n          }\r\n        );\r\n        setUserData(response.data.users);\r\n    }\r\n    \r\n    fetchData();\r\n  }, []);\r\n  \r\n  return (\r\n  <ul>\r\n    {userData.map(name =>\r\n\r\n      <li className=\"card\" key={name.name}>\r\n        <a href={`https://www.twitch.tv/${name.name}`} target=\"_blank\"  rel=\"noopener noreferrer\" >\r\n          <img src={name.logo} alt={name.display_name}/>\r\n        </a>\r\n        <p>{name.display_name}</p>\r\n        <p>{name.bio}</p>\r\n      </li>\r\n    )}\r\n  </ul>\r\n  );\r\n}\r\n//     <ul>\r\n//       {userData.map((name,index)=>{\r\n//         let twitchLink = `https://www.twitch.tv/${name.name}`;\r\n//         <li className=\"card\" key={index}>\r\n//           <a href={twitchLink} target=\"_blank\"  rel=\"noopener noreferrer\" > <img src={name.logo} alt={name.display_name}/> </a>\r\n//           <p>{name.display_name}</p>\r\n//           <p>{name.bio}</p>\r\n//         </li>\r\n//       })};\r\n//     </ul>\r\n\r\n\r\n// const Card = props => {\r\n//   // const [namesList, setNamesList] = useState('');\r\n//   const [userData, setUserData] = useState([]);\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       const response  = await axios(\r\n//           {\r\n//             'method':'GET',\r\n//             'url':'https://api.twitch.tv/kraken/users',\r\n//             'headers': {\r\n//                 'Accept': 'application/vnd.twitchtv.v5+json',\r\n//                 'Client-ID': '38kka8u16jpo72tpdefcp6f5nm86kk'\r\n//             },\r\n//             'params': {\r\n//                 'login':'1o57,secondorderchaos,synshop,lpnoway,hackwithbourbon,alkalinered,hackingdave,lordsaibat',\r\n//             }\r\n//           }\r\n//         );\r\n//         setUserData(response.data.users);\r\n//     }\r\n//       fetchData()\r\n//   }, []);      \r\n\r\n  //   axios({\r\n  //     'method':'GET',\r\n  //     'url':'https://api.twitch.tv/kraken/users',\r\n  //     'headers': {\r\n  //         'Accept': 'application/vnd.twitchtv.v5+json',\r\n  //         'Client-ID': '38kka8u16jpo72tpdefcp6f5nm86kk'\r\n  //     },\r\n  //     'params': {\r\n  //         'login':'1o57,secondorderchaos,synshop,lpnoway,hackwithbourbon,alkalinered,hackingdave,lordsaibat',\r\n  //     },\r\n  // })\r\n\r\n    // getTwitchUsers.getUsers()\r\n    //     .then((response)=>{\r\n    //       console.log(response.data.users)\r\n    //         setNamesList( response.data.users.map((name,index)=>{\r\n    //             let twitchLink = `https://www.twitch.tv/${name.name}`\r\n    //             return <li className=\"card\" key={index}>\r\n    //                  <a href={twitchLink} target=\"_blank\"  rel=\"noopener noreferrer\" > <img src={name.logo} alt={name.display_name}/> </a>\r\n    //                   <p>{name.display_name}</p>\r\n    //                   <p>{name.bio}</p>\r\n    //                 </li>;\r\n    //           })   \r\n    //         )         \r\n    //     })\r\n    //     .catch((error) => {\r\n    //         console.log(error)\r\n    //     })  \r\n  // },[]);\r\n//   <div className=\"card\">\r\n//   <ul>{namesList}</ul>\r\n// </div>\r\n\r\n\r\n//   return (\r\n//     <ul>\r\n//       {userData.map((name,index)=>{\r\n//         let twitchLink = `https://www.twitch.tv/${name.name}`;\r\n//         <li className=\"card\" key={index}>\r\n//           <a href={twitchLink} target=\"_blank\"  rel=\"noopener noreferrer\" > <img src={name.logo} alt={name.display_name}/> </a>\r\n//           <p>{name.display_name}</p>\r\n//           <p>{name.bio}</p>\r\n//         </li>\r\n//       })};\r\n//     </ul>\r\n//   );\r\n// }\r\n\r\nexport default Card;","import React from 'react'\n// import api from './api/api'\nimport Card from './components/Card/Card';\n\n// function App()  {\n  const App = props => {\n    // Create state variables\n    // let [responseData, setResponseData] = React.useState('')\n    // const [namesList, setNamesList] = useState('');\n\n    // fetches data\n\n    \n    // const fetchData = (e) => {\n    //     e.preventDefault()\n    //     api.getData()\n    //     .then((response)=>{\n    //         // setResponseData(response.data.users)\n    //         setNamesList( response.data.users.map((name,index)=>{\n    //             return <li key={index}><img src={name.logo}/></li>;\n    //           })   \n    //         )         \n    //     })\n    //     .catch((error) => {\n    //         console.log(error)\n    //     })\n    // }\n\n    return <Card />;\n    // return (\n    //     <div>\n    //         <button onClick={(e) => fetchData(e)} type='button'>Click Me For Data</button>\n    //         <ul>{ namesList }</ul>\n    //     </div>\n    // )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}